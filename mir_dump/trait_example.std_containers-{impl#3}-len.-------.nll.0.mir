// MIR for `std_containers::<impl at src/std_containers.rs:32:1: 33:38>::len` 0 nll

| Free Region Mapping
| '?0 | Global | ['?0, '?2, '?1]
| '?1 | Local | ['?2, '?1]
| '?2 | Local | ['?2]
|
| Inferred Region Values
| '?0 | U0 | {bb0[0..=2], bb1[0..=1], bb2[0], '?0, '?1, '?2}
| '?1 | U0 | {bb0[0..=2], bb1[0..=1], bb2[0], '?1}
| '?2 | U0 | {bb0[0..=2], bb1[0..=1], bb2[0], '?2}
| '?3 | U0 | {bb0[1..=2]}
| '?4 | U0 | {bb0[0..=2], bb1[0..=1], bb2[0], '?1}
| '?5 | U0 | {bb0[2]}
| '?6 | U0 | {bb0[2]}
|
| Inference Constraints
| '?0 live at {bb0[0..=2], bb1[0..=1], bb2[0]}
| '?1 live at {bb0[0..=2], bb1[0..=1], bb2[0]}
| '?2 live at {bb0[0..=2], bb1[0..=1], bb2[0]}
| '?3 live at {bb0[1]}
| '?5 live at {bb0[2]}
| '?6 live at {bb0[2]}
| '?1: '?4 due to BoringNoLocation at All(src/std_containers.rs:44:12: 44:17) (src/std_containers.rs:44:12: 44:17 (#0)
| '?3: '?5 due to Boring at Single(bb0[1]) (src/std_containers.rs:45:22: 45:26 (#0)
| '?4: '?1 due to BoringNoLocation at All(src/std_containers.rs:44:12: 44:17) (src/std_containers.rs:44:12: 44:17 (#0)
| '?4: '?3 due to Boring at Single(bb0[1]) (src/std_containers.rs:45:22: 45:26 (#0)
| '?5: '?6 due to CallArgument(Some(FnDef(DefId(1:1419 ~ std[e172]::collections::hash::set::{impl#1}::len), [T/#0, std::hash::RandomState]))) at Single(bb0[2]) (src/std_containers.rs:45:9: 45:27 (#0)
|
| User Type Annotations
| 0: user_ty: Canonical { value: TypeOf(DefId(1:1419 ~ std[e172]::collections::hash::set::{impl#1}::len), UserArgs { args: [^0, ^1], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(1:1414 ~ std[e172]::collections::hash::set::{impl#1}), self_ty: std::collections::HashSet<^2, ^3> }) }), max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }] }, span: src/std_containers.rs:45:9: 45:21, inferred_ty: for<'a> fn(&'a std::collections::HashSet<T>) -> usize {std::collections::HashSet::<T>::len}
|
fn std_containers::<impl at src/std_containers.rs:32:1: 33:38>::len(_1: &HashSet<T>) -> usize {
    debug self => _1;
    let mut _0: usize;
    let mut _2: &std::collections::HashSet<T>;

    bb0: {
        StorageLive(_2);
        _2 = &(*_1);
        _0 = HashSet::<T>::len(move _2) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        StorageDead(_2);
        return;
    }

    bb2 (cleanup): {
        resume;
    }
}

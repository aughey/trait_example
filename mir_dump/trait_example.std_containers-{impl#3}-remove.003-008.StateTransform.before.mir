// MIR for `std_containers::<impl at src/std_containers.rs:32:1: 33:38>::remove` before StateTransform

fn std_containers::<impl at src/std_containers.rs:32:1: 33:38>::remove(_1: &mut HashSet<T>) -> Option<T> {
    debug self => _1;
    let mut _0: std::option::Option<T>;
    let _2: std::option::Option<T>;
    let mut _3: std::option::Option<&T>;
    let mut _4: &mut std::collections::hash_set::Iter<'_, T>;
    let mut _5: std::collections::hash_set::Iter<'_, T>;
    let mut _6: &std::collections::HashSet<T>;
    let _7: ();
    let mut _8: isize;
    let _10: bool;
    let mut _11: &mut std::collections::HashSet<T>;
    let mut _12: &T;
    scope 1 {
        debug item => _2;
        scope 2 {
            debug item => _9;
            let _9: &T;
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = HashSet::<T>::iter(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        StorageDead(_6);
        _3 = <std::collections::hash_set::Iter<'_, T> as Iterator>::next(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_4);
        _2 = Option::<&T>::cloned(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_3);
        StorageDead(_5);
        StorageLive(_7);
        PlaceMention(_2);
        _8 = discriminant(_2);
        switchInt(move _8) -> [1: bb4, otherwise: bb6];
    }

    bb4: {
        StorageLive(_9);
        _9 = &((_2 as Some).0: T);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &mut (*_1);
        StorageLive(_12);
        _12 = &(*_9);
        _10 = HashSet::<T>::remove::<T>(move _11, move _12) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        _7 = const ();
        StorageDead(_9);
        goto -> bb7;
    }

    bb6: {
        _7 = const ();
        goto -> bb7;
    }

    bb7: {
        StorageDead(_7);
        _0 = move _2;
        goto -> bb8;
    }

    bb8: {
        StorageDead(_2);
        return;
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}

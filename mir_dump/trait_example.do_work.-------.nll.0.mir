// MIR for `do_work` 0 nll

| Free Region Mapping
| '?0 | Global | ['?0, '?2, '?1]
| '?1 | Local | ['?2, '?1]
| '?2 | Local | ['?2]
|
| Inferred Region Values
| '?0 | U0 | {bb0[0..=3], bb1[0..=3], bb2[0..=3], bb3[0..=6], bb4[0..=5], bb5[0], bb6[0], '?0, '?1, '?2}
| '?1 | U0 | {bb0[0..=3], bb1[0..=3], bb2[0..=3], bb3[0..=6], bb4[0..=5], bb5[0], bb6[0], '?1}
| '?2 | U0 | {bb0[0..=3], bb1[0..=3], bb2[0..=3], bb3[0..=6], bb4[0..=5], bb5[0], bb6[0], '?2}
| '?3 | U0 | {bb1[0..=3]}
| '?4 | U0 | {bb3[3..=6]}
| '?5 | U0 | {bb0[0..=3], bb1[0..=3], bb2[0..=3], bb3[0..=6], bb4[0..=5], bb5[0], bb6[0], '?1}
| '?6 | U0 | {bb1[1..=3]}
| '?7 | U0 | {bb3[4..=6]}
| '?8 | U0 | {bb1[3]}
| '?9 | U0 | {bb3[6]}
|
| Inference Constraints
| '?0 live at {bb0[0..=3], bb1[0..=3], bb2[0..=3], bb3[0..=6], bb4[0..=5], bb5[0], bb6[0]}
| '?1 live at {bb0[0..=3], bb1[0..=3], bb2[0..=3], bb3[0..=6], bb4[0..=5], bb5[0], bb6[0]}
| '?2 live at {bb0[0..=3], bb1[0..=3], bb2[0..=3], bb3[0..=6], bb4[0..=5], bb5[0], bb6[0]}
| '?3 live at {bb1[0]}
| '?4 live at {bb3[3]}
| '?6 live at {bb1[1..=3]}
| '?7 live at {bb3[4..=6]}
| '?8 live at {bb1[3]}
| '?9 live at {bb3[6]}
| '?1: '?5 due to BoringNoLocation at All(src/lib.rs:29:16: 29:25) (src/lib.rs:29:16: 29:25 (#0)
| '?3: '?6 due to Boring at Single(bb1[0]) (src/lib.rs:31:15: 31:33 (#0)
| '?4: '?7 due to Boring at Single(bb3[3]) (src/lib.rs:32:5: 32:14 (#0)
| '?5: '?1 due to BoringNoLocation at All(src/lib.rs:29:16: 29:25) (src/lib.rs:29:16: 29:25 (#0)
| '?5: '?4 due to Boring at Single(bb3[3]) (src/lib.rs:32:5: 32:14 (#0)
| '?6: '?8 due to CallArgument(Some(FnDef(DefId(20:414 ~ rand[4ecb]::rng::Rng::gen_range), [rand::prelude::ThreadRng, i32, std::ops::Range<i32>]))) at Single(bb1[3]) (src/lib.rs:31:15: 31:51 (#0)
| '?7: '?9 due to CallArgument(Some(FnDef(DefId(0:29 ~ trait_example[cadf]::InserttableContainer::insert), [impl InserttableContainer<i32>/#0, i32]))) at Single(bb3[6]) (src/lib.rs:32:5: 32:26 (#0)
|
fn do_work(_1: &mut impl InserttableContainer<i32>) -> () {
    debug container => _1;
    let mut _0: ();
    let _2: i32;
    let mut _3: &mut rand::prelude::ThreadRng;
    let mut _4: rand::prelude::ThreadRng;
    let mut _5: std::ops::Range<i32>;
    let _6: ();
    let mut _7: &mut impl InserttableContainer<i32>;
    let mut _8: i32;
    scope 1 {
        debug num => _2;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = thread_rng() -> [return: bb1, unwind: bb6];
    }

    bb1: {
        _3 = &mut _4;
        StorageLive(_5);
        _5 = std::ops::Range::<i32> { start: const 0_i32, end: const 100_i32 };
        _2 = <ThreadRng as Rng>::gen_range::<i32, std::ops::Range<i32>>(move _3, move _5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_3);
        FakeRead(ForLet(None), _2);
        drop(_4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &mut (*_1);
        StorageLive(_8);
        _8 = _2;
        _6 = <impl InserttableContainer<i32> as InserttableContainer<i32>>::insert(move _7, move _8) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        _0 = const ();
        StorageDead(_2);
        return;
    }

    bb5 (cleanup): {
        drop(_4) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

// MIR for `std_containers::<impl at src/std_containers.rs:24:1: 25:30>::insert` 0 nll

| Free Region Mapping
| '?0 | Global | ['?0, '?2, '?1]
| '?1 | Local | ['?2, '?1]
| '?2 | Local | ['?2]
|
| Inferred Region Values
| '?0 | U0 | {bb0[0..=5], bb1[0..=4], bb2[0], bb3[0], bb4[0], bb5[0], '?0, '?1, '?2}
| '?1 | U0 | {bb0[0..=5], bb1[0..=4], bb2[0], bb3[0], bb4[0], bb5[0], '?1}
| '?2 | U0 | {bb0[0..=5], bb1[0..=4], bb2[0], bb3[0], bb4[0], bb5[0], '?2}
| '?3 | U0 | {bb0[2..=5]}
| '?4 | U0 | {bb0[0..=5], bb1[0..=4], bb2[0], bb3[0], bb4[0], bb5[0], '?1}
| '?5 | U0 | {bb0[3..=5]}
| '?6 | U0 | {bb0[5]}
|
| Inference Constraints
| '?0 live at {bb0[0..=5], bb1[0..=4], bb2[0], bb3[0], bb4[0], bb5[0]}
| '?1 live at {bb0[0..=5], bb1[0..=4], bb2[0], bb3[0], bb4[0], bb5[0]}
| '?2 live at {bb0[0..=5], bb1[0..=4], bb2[0], bb3[0], bb4[0], bb5[0]}
| '?3 live at {bb0[2]}
| '?5 live at {bb0[3..=5]}
| '?6 live at {bb0[5]}
| '?1: '?4 due to BoringNoLocation at All(src/std_containers.rs:27:15: 27:24) (src/std_containers.rs:27:15: 27:24 (#0)
| '?3: '?5 due to Boring at Single(bb0[2]) (src/std_containers.rs:28:25: 28:29 (#0)
| '?4: '?1 due to BoringNoLocation at All(src/std_containers.rs:27:15: 27:24) (src/std_containers.rs:27:15: 27:24 (#0)
| '?4: '?3 due to Boring at Single(bb0[2]) (src/std_containers.rs:28:25: 28:29 (#0)
| '?5: '?6 due to CallArgument(Some(FnDef(DefId(1:1461 ~ std[e172]::collections::hash::set::{impl#2}::insert), [T/#0, std::hash::RandomState]))) at Single(bb0[5]) (src/std_containers.rs:28:9: 28:36 (#0)
|
| User Type Annotations
| 0: user_ty: Canonical { value: TypeOf(DefId(1:1461 ~ std[e172]::collections::hash::set::{impl#2}::insert), UserArgs { args: [^0, ^1], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(1:1430 ~ std[e172]::collections::hash::set::{impl#2}), self_ty: std::collections::HashSet<^2, ^3> }) }), max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }] }, span: src/std_containers.rs:28:9: 28:24, inferred_ty: for<'a> fn(&'a mut std::collections::HashSet<T>, T) -> bool {std::collections::HashSet::<T>::insert}
|
fn std_containers::<impl at src/std_containers.rs:24:1: 25:30>::insert(_1: &mut HashSet<T>, _2: T) -> () {
    debug self => _1;
    debug item => _2;
    let mut _0: ();
    let _3: bool;
    let mut _4: &mut std::collections::HashSet<T>;
    let mut _5: T;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &mut (*_1);
        StorageLive(_5);
        _5 = move _2;
        _3 = HashSet::<T>::insert(move _4, move _5) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        _0 = const ();
        drop(_2) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_5) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

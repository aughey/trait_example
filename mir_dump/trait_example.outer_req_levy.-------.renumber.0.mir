// MIR for `outer_req_levy` 0 renumber

| User Type Annotations
| 0: user_ty: Canonical { value: TypeOf(DefId(5:6967 ~ alloc[0cbc]::vec::{impl#0}::new), UserArgs { args: [^0], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(5:6965 ~ alloc[0cbc]::vec::{impl#0}), self_ty: std::vec::Vec<^1, ^2> }) }), max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }] }, span: src/lib.rs:50:25: 50:33, inferred_ty: fn() -> std::vec::Vec<ComplexData> {std::vec::Vec::<ComplexData>::new}
|
fn outer_req_levy() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<ComplexData>;
    let _2: ();
    let mut _3: &mut std::vec::Vec<ComplexData>;
    let mut _4: ComplexData;
    let _5: ();
    let mut _6: bool;
    let mut _7: &mut std::vec::Vec<ComplexData>;
    let mut _8: &mut std::vec::Vec<ComplexData>;
    scope 1 {
        debug container => _1;
        scope 2 {
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = Vec::<ComplexData>::new() -> [return: bb1, unwind: bb6];
    }

    bb1: {
        FakeRead(ForLet(None), _1);
        StorageLive(_2);
        StorageLive(_3);
        _3 = &mut _1;
        StorageLive(_4);
        _4 = ComplexData { a: const 1_i32, b: const 2_i32 };
        _2 = Vec::<ComplexData>::push(move _3, move _4) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &mut _1;
        _7 = &mut (*_8);
        _6 = consume_priority::<Vec<ComplexData>, ComplexData>(move _7) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        StorageDead(_7);
        PlaceMention(_6);
        StorageDead(_8);
        StorageDead(_6);
        _5 = const ();
        StorageDead(_5);
        _0 = const ();
        drop(_1) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        StorageDead(_1);
        return;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}

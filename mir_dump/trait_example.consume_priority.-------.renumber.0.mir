// MIR for `consume_priority` 0 renumber

fn consume_priority(_1: &mut C) -> bool {
    debug container => _1;
    let mut _0: bool;
    let mut _2: &std::option::Option<Item>;
    let _3: std::option::Option<Item>;
    let mut _4: &mut C;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &mut (*_1);
        _3 = <C as RemovableContainer<Item>>::remove(move _4) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _2 = &_3;
        StorageDead(_4);
        _0 = Option::<Item>::is_some(move _2) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        StorageDead(_2);
        drop(_3) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        StorageDead(_3);
        return;
    }

    bb4 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        resume;
    }
}

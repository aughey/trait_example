// MIR for `<impl at src/lib.rs:61:1: 61:30>::priority` 0 nll

| Free Region Mapping
| '?0 | Global | ['?0, '?2, '?1]
| '?1 | Local | ['?2, '?1]
| '?2 | Local | ['?2]
|
| Inferred Region Values
| '?0 | U0 | {bb0[0..=7], bb1[0..=3], bb2[0..=3], bb3[0], '?0, '?1, '?2}
| '?1 | U0 | {bb0[0..=7], bb1[0..=3], bb2[0..=3], bb3[0], '?1}
| '?2 | U0 | {bb0[0..=7], bb1[0..=3], bb2[0..=3], bb3[0], '?2}
| '?3 | U0 | {bb0[0..=7], bb1[0..=3], bb2[0..=3], bb3[0], '?1}
|
| Inference Constraints
| '?0 live at {bb0[0..=7], bb1[0..=3], bb2[0..=3], bb3[0]}
| '?1 live at {bb0[0..=7], bb1[0..=3], bb2[0..=3], bb3[0]}
| '?2 live at {bb0[0..=7], bb1[0..=3], bb2[0..=3], bb3[0]}
| '?1: '?3 due to BoringNoLocation at All(src/lib.rs:62:17: 62:22) (src/lib.rs:62:17: 62:22 (#0)
| '?3: '?1 due to BoringNoLocation at All(src/lib.rs:62:17: 62:22) (src/lib.rs:62:17: 62:22 (#0)
|
fn <impl at src/lib.rs:61:1: 61:30>::priority(_1: &ComplexData) -> u32 {
    debug self => _1;
    let mut _0: u32;
    let mut _2: i32;
    let mut _3: i32;
    let mut _4: i32;
    let mut _5: i32;
    let mut _6: (i32, bool);

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).0: i32);
        StorageLive(_5);
        _5 = ((*_1).1: i32);
        _6 = CheckedAdd(_4, _5);
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> [success: bb1, unwind: bb3];
    }

    bb1: {
        _3 = move (_6.0: i32);
        StorageDead(_5);
        StorageDead(_4);
        _2 = <i32 as Ord>::clamp(move _3, const 0_i32, const 100_i32) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        StorageDead(_3);
        _0 = move _2 as u32 (IntToInt);
        StorageDead(_2);
        return;
    }

    bb3 (cleanup): {
        resume;
    }
}

// MIR for `std_containers::<impl at src/std_containers.rs:32:1: 33:38>::remove` after SimplifyLocals-before-const-prop

fn std_containers::<impl at src/std_containers.rs:32:1: 33:38>::remove(_1: &mut HashSet<T>) -> Option<T> {
    debug self => _1;
    let mut _0: std::option::Option<T>;
    let _2: std::option::Option<T>;
    let mut _3: std::option::Option<&T>;
    let mut _4: &mut std::collections::hash_set::Iter<'_, T>;
    let mut _5: std::collections::hash_set::Iter<'_, T>;
    let mut _6: &std::collections::HashSet<T>;
    let mut _7: isize;
    let _9: bool;
    let mut _10: &mut std::collections::HashSet<T>;
    let mut _11: &T;
    scope 1 {
        debug item => _2;
        scope 2 {
            debug item => _8;
            let _8: &T;
        }
    }

    bb0: {
        _6 = &(*_1);
        _5 = HashSet::<T>::iter(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _3 = <std::collections::hash_set::Iter<'_, T> as Iterator>::next(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = Option::<&T>::cloned(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = discriminant(_2);
        switchInt(move _7) -> [1: bb4, otherwise: bb5];
    }

    bb4: {
        _8 = &((_2 as Some).0: T);
        _10 = _1;
        _11 = _8;
        _9 = HashSet::<T>::remove::<T>(move _10, move _11) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _0 = move _2;
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        resume;
    }
}

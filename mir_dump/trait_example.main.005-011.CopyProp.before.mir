// MIR for `main` before CopyProp

fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<i32>;
    let _2: ();
    let mut _3: &mut std::vec::Vec<i32>;
    let mut _4: &mut std::vec::Vec<i32>;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[&str; 2];
    let _9: &[&str; 2];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let mut _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let mut _15: &std::vec::Vec<i32>;
    let _16: &std::vec::Vec<i32>;
    let _17: ();
    let mut _18: &mut std::vec::Vec<i32>;
    let mut _19: &mut std::vec::Vec<i32>;
    let _20: ();
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[&str; 2];
    let _24: &[&str; 2];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let mut _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: [core::fmt::rt::Argument<'_>; 1];
    let mut _29: core::fmt::rt::Argument<'_>;
    let mut _30: &std::vec::Vec<i32>;
    let _31: &std::vec::Vec<i32>;
    scope 1 {
        debug v => _1;
        let mut _32: &[&str; 2];
        let mut _33: &[&str; 2];
    }

    bb0: {
        _1 = Vec::<i32>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _1;
        _3 = _4;
        _2 = do_work_to_vec(move _3) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _33 = const _;
        _9 = _33;
        _8 = _9;
        _7 = move _8 as &[&str] (PointerCoercion(Unsize));
        _16 = &_1;
        _15 = _16;
        _14 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<i32>>(move _15) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12;
        _10 = move _11 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _5 = _print(move _6) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _19 = &mut _1;
        _18 = _19;
        _17 = do_work_to_generic::<Vec<i32>>(move _18) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _32 = const _;
        _24 = _32;
        _23 = _24;
        _22 = move _23 as &[&str] (PointerCoercion(Unsize));
        _31 = &_1;
        _30 = _31;
        _29 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<i32>>(move _30) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _28 = [move _29];
        _27 = &_28;
        _26 = _27;
        _25 = move _26 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _21 = Arguments::<'_>::new_v1(move _22, move _25) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        _20 = _print(move _21) -> [return: bb9, unwind: bb11];
    }

    bb9: {
        drop(_1) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_1) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

// MIR for `main` before ConstDebugInfo

fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<i32>;
    let _2: ();
    let mut _3: &mut std::vec::Vec<i32>;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &std::vec::Vec<i32>;
    let _12: ();
    let mut _13: &mut std::vec::Vec<i32>;
    let _14: ();
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let _18: &[core::fmt::rt::Argument<'_>; 1];
    let _19: [core::fmt::rt::Argument<'_>; 1];
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &std::vec::Vec<i32>;
    scope 1 {
        debug v => _1;
        let mut _22: &[&str; 2];
        let mut _23: &[&str; 2];
    }

    bb0: {
        _1 = Vec::<i32>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _1;
        _2 = do_work_to_vec(_3) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _23 = const _;
        _6 = _23 as &[&str] (PointerCoercion(Unsize));
        _11 = &_1;
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<i32>>(_11) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _4 = _print(move _5) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _13 = &mut _1;
        _12 = do_work_to_generic::<Vec<i32>>(_13) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        _22 = const _;
        _16 = _22 as &[&str] (PointerCoercion(Unsize));
        _21 = &_1;
        _20 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<i32>>(_21) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _19 = [move _20];
        _18 = &_19;
        _17 = _18 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _15 = Arguments::<'_>::new_v1(move _16, move _17) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        _14 = _print(move _15) -> [return: bb9, unwind: bb11];
    }

    bb9: {
        drop(_1) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_1) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}

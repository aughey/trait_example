// MIR for `main` after CleanupPostBorrowck

fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<i32>;
    let _2: ();
    let mut _3: &mut std::vec::Vec<i32>;
    let mut _4: &mut std::vec::Vec<i32>;
    let _5: ();
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[&str; 2];
    let _10: &[&str; 2];
    let _11: [&str; 2];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let mut _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let mut _17: &std::vec::Vec<i32>;
    let _18: &std::vec::Vec<i32>;
    let _19: ();
    let mut _20: &mut std::vec::Vec<i32>;
    let mut _21: &mut std::vec::Vec<i32>;
    let _22: ();
    let _23: ();
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[&str; 2];
    let _27: &[&str; 2];
    let _28: [&str; 2];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let mut _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: &[core::fmt::rt::Argument<'_>; 1];
    let _32: [core::fmt::rt::Argument<'_>; 1];
    let mut _33: core::fmt::rt::Argument<'_>;
    let mut _34: &std::vec::Vec<i32>;
    let _35: &std::vec::Vec<i32>;
    scope 1 {
        debug v => _1;
        let mut _36: &[&str; 2];
        let mut _37: &[&str; 2];
    }

    bb0: {
        StorageLive(_1);
        _1 = Vec::<i32>::new() -> [return: bb1, unwind: bb12];
    }

    bb1: {
        nop;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &mut _1;
        _3 = &mut (*_4);
        _2 = do_work_to_vec(move _3) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        StorageDead(_3);
        StorageDead(_4);
        StorageDead(_2);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _37 = const _;
        _10 = &(*_37);
        _9 = &(*_10);
        _8 = move _9 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_9);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &_1;
        _17 = &(*_18);
        _16 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<i32>>(move _17) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        StorageDead(_17);
        _15 = [move _16];
        StorageDead(_16);
        _14 = &_15;
        _13 = &(*_14);
        _12 = move _13 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_13);
        _7 = Arguments::<'_>::new_v1(move _8, move _12) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        StorageDead(_12);
        StorageDead(_8);
        _6 = _print(move _7) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        StorageDead(_7);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_6);
        _5 = const ();
        StorageDead(_5);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut _1;
        _20 = &mut (*_21);
        _19 = do_work_to_generic::<Vec<i32>>(move _20) -> [return: bb6, unwind: bb11];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_21);
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _36 = const _;
        _27 = &(*_36);
        _26 = &(*_27);
        _25 = move _26 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &_1;
        _34 = &(*_35);
        _33 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<i32>>(move _34) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        StorageDead(_34);
        _32 = [move _33];
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = move _30 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_30);
        _24 = Arguments::<'_>::new_v1(move _25, move _29) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_25);
        _23 = _print(move _24) -> [return: bb9, unwind: bb11];
    }

    bb9: {
        StorageDead(_24);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_27);
        StorageDead(_23);
        _22 = const ();
        StorageDead(_22);
        _0 = const ();
        drop(_1) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        StorageDead(_1);
        return;
    }

    bb11 (cleanup): {
        drop(_1) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }
}
